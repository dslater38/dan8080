precision mediump float;
uniform vec4 background;
uniform vec4 score;
uniform vec4 main_;
uniform vec4 bunkers;
uniform vec4 player;
uniform vec4 baseline;
uniform vec4 reserves;

uniform sampler2D bitmap;
varying highp vec2 tex2;

vec4 rowColor( int row ){
	if( row > 223 )
		return score;
	else if( row > 63 )
		return main_;
	else if( row > 43 )
		return bunkers;
	else if( row > 17 )
		return player;
	else if( row > 15 )
		return baseline;
	else 
		return reserves;
}

int mod(int a, int b) {
	return a-b*(a/b);
}

bool bitSet(int val, int bit) {

	if( bit == 0 ) {
		return (mod(val,2)==1);
	} else if( bit == 1 ) {
		return (mod(val/2,2)==1);
	}else if( bit == 2 ) {
		return (mod(val/4,2)==1);
	}else if( bit ==3 ) {
		return (mod(val/8,2)==1);
	}else if( bit == 4 ) {
		return (mod(val/16,2)==1);
	}else if( bit == 5 ) {
		return (mod(val/32,2)==1);
	}else if( bit == 6 ) {
		return (mod(val/64,2)==1);
	} else {
		return (mod(val/128,2)==1);
	}

}

void main()
{
	int px = int(223.0*(tex2.s));
	int py = int(255.0*(tex2.t));
	int bitNum = px*256+py;
	int byteNum = bitNum / 8;
	int pixelNum = bitNum / 32;
	
	
	int texelY = pixelNum / 64;
	int texelX = pixelNum - 64*texelY;
	
	float texX = 0.01562500000000000 * float(texelX) + 0.00781250000000000;
	float texY = 0.03125000000000000* float(texelY) + 0.01562500000000000;
	
	vec4 texel = texture2D(bitmap, vec2(texX, texY) );
	
	int bit =  bitNum-32*pixelNum; //  mod(bitNum,32);
	float value = (bit < 8 ) ? texel.r :
				(bit < 16 ) ? texel.g :
				(bit < 24 ) ? texel.b :
				texel.a;
	
	bit = mod(bit,8);
	
	bool isSet = bitSet(int(255.0*value+0.5), bit );
	
	gl_FragColor = isSet ? rowColor(py) : background;
}