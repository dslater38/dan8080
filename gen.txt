// MOV ddd,sss - (0x40 | (ddd<<3)|sss)
// register byte offsets: A==0, B==2, C==3, D==4, E==5, H==6, L==7
instructions[0x40] = function() {  }	 // MOV B, B == NOP
instructions[0x41] = function() { r8[0x03] = r8[0x02]; }	 // MOV B, C
instructions[0x42] = function() { r8[0x03] = r8[0x05]; }	 // MOV B, D
instructions[0x43] = function() { r8[0x03] = r8[0x04]; }	 // MOV B, E
instructions[0x44] = function() { r8[0x03] = r8[0x07]; }	 // MOV B, H
instructions[0x45] = function() { r8[0x03] = r8[0x06]; }	 // MOV B, L
instructions[0x46] = function() { r8[0x03] = ram.getUint8( regs.getUint16(0x06, true) ); }	 // MOV B, m
instructions[0x47] = function() { r8[0x03] = r8[0x01]; }	 // MOV B, A
instructions[0x48] = function() { r8[0x02] = r8[0x03]; }	 // MOV C, B
instructions[0x49] = function() {  }	 // MOV C, C == NOP
instructions[0x4a] = function() { r8[0x02] = r8[0x05]; }	 // MOV C, D
instructions[0x4b] = function() { r8[0x02] = r8[0x04]; }	 // MOV C, E
instructions[0x4c] = function() { r8[0x02] = r8[0x07]; }	 // MOV C, H
instructions[0x4d] = function() { r8[0x02] = r8[0x06]; }	 // MOV C, L
instructions[0x4e] = function() { r8[0x02] = ram.getUint8( regs.getUint16(0x06, true) ); }	 // MOV C, m
instructions[0x4f] = function() { r8[0x02] = r8[0x01]; }	 // MOV C, A
instructions[0x50] = function() { r8[0x05] = r8[0x03]; }	 // MOV D, B
instructions[0x51] = function() { r8[0x05] = r8[0x02]; }	 // MOV D, C
instructions[0x52] = function() {  }	 // MOV D, D == NOP
instructions[0x53] = function() { r8[0x05] = r8[0x04]; }	 // MOV D, E
instructions[0x54] = function() { r8[0x05] = r8[0x07]; }	 // MOV D, H
instructions[0x55] = function() { r8[0x05] = r8[0x06]; }	 // MOV D, L
instructions[0x56] = function() { r8[0x05] = ram.getUint8( regs.getUint16(0x06, true) ); }	 // MOV D, m
instructions[0x57] = function() { r8[0x05] = r8[0x01]; }	 // MOV D, A
instructions[0x58] = function() { r8[0x04] = r8[0x03]; }	 // MOV E, B
instructions[0x59] = function() { r8[0x04] = r8[0x02]; }	 // MOV E, C
instructions[0x5a] = function() { r8[0x04] = r8[0x05]; }	 // MOV E, D
instructions[0x5b] = function() {  }	 // MOV E, E == NOP
instructions[0x5c] = function() { r8[0x04] = r8[0x07]; }	 // MOV E, H
instructions[0x5d] = function() { r8[0x04] = r8[0x06]; }	 // MOV E, L
instructions[0x5e] = function() { r8[0x04] = ram.getUint8( regs.getUint16(0x06, true) ); }	 // MOV E, m
instructions[0x5f] = function() { r8[0x04] = r8[0x01]; }	 // MOV E, A
instructions[0x60] = function() { r8[0x07] = r8[0x03]; }	 // MOV H, B
instructions[0x61] = function() { r8[0x07] = r8[0x02]; }	 // MOV H, C
instructions[0x62] = function() { r8[0x07] = r8[0x05]; }	 // MOV H, D
instructions[0x63] = function() { r8[0x07] = r8[0x04]; }	 // MOV H, E
instructions[0x64] = function() {  }	 // MOV H, H == NOP
instructions[0x65] = function() { r8[0x07] = r8[0x06]; }	 // MOV H, L
instructions[0x66] = function() { r8[0x07] = ram.getUint8( regs.getUint16(0x06, true) ); }	 // MOV H, m
instructions[0x67] = function() { r8[0x07] = r8[0x01]; }	 // MOV H, A
instructions[0x68] = function() { r8[0x06] = r8[0x03]; }	 // MOV L, B
instructions[0x69] = function() { r8[0x06] = r8[0x02]; }	 // MOV L, C
instructions[0x6a] = function() { r8[0x06] = r8[0x05]; }	 // MOV L, D
instructions[0x6b] = function() { r8[0x06] = r8[0x04]; }	 // MOV L, E
instructions[0x6c] = function() { r8[0x06] = r8[0x07]; }	 // MOV L, H
instructions[0x6d] = function() {  }	 // MOV L, L == NOP
instructions[0x6e] = function() { r8[0x06] = ram.getUint8( regs.getUint16(0x06, true) ); }	 // MOV L, m
instructions[0x6f] = function() { r8[0x06] = r8[0x01]; }	 // MOV L, A
instructions[0x70] = function() { ram.setUint8( regs.getUint16(0x06,true), r8[0x03] ); }	 // MOV m, B
instructions[0x71] = function() { ram.setUint8( regs.getUint16(0x06,true), r8[0x02] ); }	 // MOV m, C
instructions[0x72] = function() { ram.setUint8( regs.getUint16(0x06,true), r8[0x05] ); }	 // MOV m, D
instructions[0x73] = function() { ram.setUint8( regs.getUint16(0x06,true), r8[0x04] ); }	 // MOV m, E
instructions[0x74] = function() { ram.setUint8( regs.getUint16(0x06,true), r8[0x07] ); }	 // MOV m, H
instructions[0x75] = function() { ram.setUint8( regs.getUint16(0x06,true), r8[0x06] ); }	 // MOV m, L
instructions[0x77] = function() { ram.setUint8( regs.getUint16(0x06,true), r8[0x01] ); }	 // MOV m, A
instructions[0x78] = function() { r8[0x01] = r8[0x03]; }	 // MOV A, B
instructions[0x79] = function() { r8[0x01] = r8[0x02]; }	 // MOV A, C
instructions[0x7a] = function() { r8[0x01] = r8[0x05]; }	 // MOV A, D
instructions[0x7b] = function() { r8[0x01] = r8[0x04]; }	 // MOV A, E
instructions[0x7c] = function() { r8[0x01] = r8[0x07]; }	 // MOV A, H
instructions[0x7d] = function() { r8[0x01] = r8[0x06]; }	 // MOV A, L
instructions[0x7e] = function() { r8[0x01] = ram.getUint8( regs.getUint16(0x06, true) ); }	 // MOV A, m
instructions[0x7f] = function() {  }	 // MOV A, A == NOP

// MVI ddd - ((ddd<<3)|0x06)
instructions[0x06] = function() { r8[0x03] = ram8[ (r16[0x0a])++ ]; } 	// MVI B, imm8
instructions[0x0e] = function() { r8[0x02] = ram8[ (r16[0x0a])++ ]; } 	// MVI C, imm8
instructions[0x16] = function() { r8[0x05] = ram8[ (r16[0x0a])++ ]; } 	// MVI D, imm8
instructions[0x1e] = function() { r8[0x04] = ram8[ (r16[0x0a])++ ]; } 	// MVI E, imm8
instructions[0x26] = function() { r8[0x07] = ram8[ (r16[0x0a])++ ]; } 	// MVI H, imm8
instructions[0x2e] = function() { r8[0x06] = ram8[ (r16[0x0a])++ ]; } 	// MVI L, imm8
instructions[0x36] = function() { ram.setUint8( regs.getUint16( 0x06, true ), ram8[ (r16[0x0a])++ ] ); } 	// MVI m, imm8
instructions[0x3e] = function() { r8[0x01] = ram8[ (r16[0x0a])++ ]; } 	// MVI A, imm8

// LDA [imm16]
instructions[0x3A] = function()  { r8[0x01] = ram8[ readImm16() ]; }
// STA [imm16]
// LHLD addr HL <== ram[addr]
// SHLD addr ram[addr] <== HL

// LDAX rp (rp<<4)|0x0A - Load A indirect through BC or DE
instructions[0x0a] = function() { r8[0x01] = ram.getUint8( regs.getUint16( 0x02, true ) );  } // LDAX BC
instructions[0x1a] = function() { r8[0x01] = ram.getUint8( regs.getUint16( 0x04, true ) );  } // LDAX DE

// STAX rp (rp<<4)|0x0A - Load A indirect through BC or DE
instructions[0x02] = function() { ram.setUint8( regs.getUint16( 0x02, true ), r8[0x01]);  } // STAX BC
instructions[0x12] = function() { ram.setUint8( regs.getUint16( 0x04, true ), r8[0x01]);  } // STAX DE
// XCHG
instructions[ 0xEB] = function() { r16[0x04] = r16[0x06] + ( r16[0x06] = r16[0x04], 0 );  }

// LXI rp - (rp<<4)|0x01)
// 16-bit registers BC == 2, DE == 4, HL == 6, SP ==8, PC == 10


instructions[0x01] = function() { r16[0x02] = readImm16(); } // LXI BC
instructions[0x11] = function() { r16[0x04] = readImm16(); } // LXI DE
instructions[0x21] = function() { r16[0x06] = readImm16(); } // LXI HL
instructions[0x31] = function() { r16[0x08] = readImm16(); } // LXI SP
// ADD s - ((ddd<<3)|0x06)
instructions[0x80] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[0x03]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD B
instructions[0x81] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[0x02]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD C
instructions[0x82] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[0x05]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD D
instructions[0x83] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[0x04]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD E
instructions[0x84] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[0x07]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD H
instructions[0x85] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[0x06]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD L
instructions[0x86] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[ram.getUint8( regs.getUint16(0x06, true) )]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD [HL]
instructions[0x87] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[0x01]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADD A
instructions[0xc6] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[readImm16()]; r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADI [imm16]
// ADC s - ((ddd<<3)|0x06)
instructions[0x88] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x03 +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC B
instructions[0x89] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x02 +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC C
instructions[0x8a] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x05 +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC D
instructions[0x8b] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x04 +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC E
instructions[0x8c] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x07 +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC H
instructions[0x8d] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x06 +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC L
instructions[0x8e] = function() {  function() { var lhs = r8[0x01]; var rhs = ram.getUint8( regs.getUint16(0x06, true) ) +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC [HL]
instructions[0x8f] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x01 +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ADC A
instructions[0xce] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[readImm16()] +  (getCF() ? 1 : 0); r8[0x01] = lhs+rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // ACI [imm16]
// SUB s - ((ddd<<3)|0x06)
instructions[0x90] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x03; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB B
instructions[0x91] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x02; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB C
instructions[0x92] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x05; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB D
instructions[0x93] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x04; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB E
instructions[0x94] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x07; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB H
instructions[0x95] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x06; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB L
instructions[0x96] = function() {  function() { var lhs = r8[0x01]; var rhs = ram.getUint8( regs.getUint16(0x06, true) ); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB [HL]
instructions[0x97] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x01; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUB A
instructions[0xd6] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[readImm16()]; r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SUI [imm16]
// SBB s - ((ddd<<3)|0x06)
instructions[0x88] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x03 -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB B
instructions[0x89] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x02 -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB C
instructions[0x8a] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x05 -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB D
instructions[0x8b] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x04 -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB E
instructions[0x8c] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x07 -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB H
instructions[0x8d] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x06 -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB L
instructions[0x8e] = function() {  function() { var lhs = r8[0x01]; var rhs = ram.getUint8( regs.getUint16(0x06, true) ) -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB [HL]
instructions[0x8f] = function() {  function() { var lhs = r8[0x01]; var rhs = 0x01 -  (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBB A
instructions[0xde] = function() {  function() { var lhs = r8[0x01]; var rhs = r8[readImm16()]  - (getCF() ? 1 : 0); r8[0x01] = lhs-rhs; setFlagsZSPC( r8[0x01] ); HF( lhs, rhs, r8[0x01]); } // SBI [imm16]

instructions[0x06] = function() { r8[0x03] = ram8[ (r16[0x0a])++ ]; } 	// MVI B, imm8
instructions[0x0e] = function() { r8[0x02] = ram8[ (r16[0x0a])++ ]; } 	// MVI C, imm8
instructions[0x16] = function() { r8[0x05] = ram8[ (r16[0x0a])++ ]; } 	// MVI D, imm8
instructions[0x1e] = function() { r8[0x04] = ram8[ (r16[0x0a])++ ]; } 	// MVI E, imm8
instructions[0x26] = function() { r8[0x07] = ram8[ (r16[0x0a])++ ]; } 	// MVI H, imm8
instructions[0x2e] = function() { r8[0x06] = ram8[ (r16[0x0a])++ ]; } 	// MVI L, imm8
instructions[0x36] = function() { ram.setUint8( regs.getUint16( 0x06, true ), ram8[ (r16[0x0a])++ ] ); } 	// MVI m, imm8
instructions[0x3e] = function() { r8[0x01] = ram8[ (r16[0x0a])++ ]; } 	// MVI A, imm8
